#!/usr/bin/env python
# encoding: utf-8
"""
Snappy documentation goes here
@author: Heather Piwowar
@contact:  hpiwowar@gmail.com
@status:  playing around
"""

from __future__ import with_statement
import sys
import os
import nose
from nose.tools import assert_equals
import fudge
from fudge.inspector import arg
from fudge import patched_context
from tests import slow, online, notimplemented, acceptance
import dataset
import datasources
import datasources.geo
import datasources.arrayexpress
import datasources.smd
import datasources.ochsner
from utils.cache import TimedCache

if __name__ == '__main__':
    nose.runmodule()
    
# Shared test data
test_data_request = "pubmed.pubmed_id, geo.has_data_submission, arrayexpress.has_data_submission, smd.has_data_submission"
gold_pmids = ['16960149', '16973760', '17170127', '17404298']
test_data_geo_filter = "pubmed_gds[filter]"
test_data_geo_filtered_pmids = ['16960149', '17404298']
test_data_arrayexpress_filtered_pmids = ['17170127']
test_data_smd_filtered_pmids = ['17404298']
test_data_geo_has_data = ['1', '0', '0', '1']
test_data_arrayexpress_has_data = ['0', '0', '1', '0']
test_data_smd_has_data = ['0', '0', '0', '1']
test_data_pubmed_is_humans = ['1', '1', '1', '1']
test_data_pubmed_is_animals = ['0', '1', '0', '1']
test_data_pubmed_is_mice = ['0', '1', '0', '0']
test_data_pubmed_is_bacteria = ['0', '0', '0', '0']
test_data_pubmed_is_fungi = ['0', '0', '0', '0']
test_data_pubmed_is_cultured_cells = ['1', '0', '1', '0']
test_data_pubmed_is_cancer = ['1', '0', '0', '0']
test_data_has_geo_data_submission = [['pmid'] + gold_pmids, ['has_geo_data'] + test_data_geo_has_data]
test_data_collect_response = [['pmid'] + gold_pmids, 
                              ['has_geo_data'] + test_data_geo_has_data, 
                              ['has_arrayexpress_data'] + test_data_arrayexpress_has_data,
                              ['has_smd_data'] + test_data_smd_has_data] 
test_data_csv_format = [['pmid', 'has_geo_data'], ['16960149', '1'], ['16973760', '0'], ['17170127', '0'], ['17404298', '1']]
test_data_csv_string = 'pmid,has_geo_data\r\n16960149,1\r\n16973760,0\r\n17170127,0\r\n17404298,1\r\n'
test_data_soup_to_nuts = 'pmid,has_geo_data,has_arrayexpress_data,has_smd_data\r\n16960149,1,0,0\r\n16973760,0,0,0\r\n17170127,0,1,0\r\n17404298,1,0,1\r\n'
test_data_ochsner_found_geo_data = ['0', '0', '0', '0']
test_data_ochsner_found_arrayexpress_data = ['0', '0', '1', '0']
test_data_ochsner_found_smd_data = ['0', '0', '0', '1']
test_data_ochsner_other_gold_pmids = ['17510434', '17409432', '17308088', '18172295', '17200196', '17200196']
test_data_ochsner_found_journal_data = ['1', '0', '0', '0', '1', '1']
test_data_ochsner_found_other_data = ['0', '1', '1', '0', '0', '0']
test_data_ochsner_found_any_data = ['0', '0', '1', '1', '1', '1', '1', '0', '1', '1']
test_data_list_data_ids = ['', '', u'E-TABM-133', u'SMD-Experiment-Set-No_3827']
test_data_pubmed_date_published = ['2007 Jan 1', '2007 Jan', '2007 Apr 15', '2007 Apr 15']
test_data_pubmed_journal = ['Blood', 'Mol Endocrinol', 'Blood', 'J Immunol']
test_data_pubmed_authors = ['Richter JA, Siebert R, Climent J, Fresquet V, Beltran E, Agirre X, Marugan I, Rosenwald A, Sugimoto KJ, Wheat LM, Karran EL, Sanchez L, Prosper F, Staudt LM, Pinkel D, Dyer MJ', 'Nilsson M, Stulnig TM, Lin CY, Yeo AL, Nowotny P, Liu ET, Steffensen KR', 'Raslova H, Kauffmann A, Ripoche H, Larbret F, Robert T, Le Roux DT, Kroemer G, Debili N, Dessen P, Lazar V, Vainchenker W', 'Kim SK, Fouts AE, Boothroyd JC']
test_data_pubmed_number_times_cited_in_pmc = [3, 0, 2, 5]



class TestPubMed(object):
    @online
    def test_pubmed_filter_no_hits(self):
        response = datasources.pubmed.is_humans([])
        assert_equals(response, [])

    @online
    def test_pubmed_date_published(self):
        response = datasources.pubmed.date_published(gold_pmids)
        assert_equals(response, test_data_pubmed_date_published)

    @online
    def test_pubmed_journal(self):
        response = datasources.pubmed.journal(gold_pmids)
        assert_equals(response, test_data_pubmed_journal)

    @online
    def test_pubmed_authors(self):
        response = datasources.pubmed.authors(gold_pmids)
        assert_equals(response, test_data_pubmed_authors)

    @online
    def test_pubmed_number_times_cited_in_pmc(self):
        response = datasources.pubmed.number_times_cited_in_pmc(gold_pmids)
        assert_equals(response, test_data_pubmed_number_times_cited_in_pmc)
        
    @online
    def test_pubmed_is_humans(self):
        response = datasources.pubmed.is_humans(gold_pmids)
        assert_equals(response, test_data_pubmed_is_humans)

    @online
    def test_pubmed_is_animals(self):
        response = datasources.pubmed.is_animals(gold_pmids)
        assert_equals(response, test_data_pubmed_is_animals)

    @online
    def test_pubmed_is_mice(self):
        response = datasources.pubmed.is_mice(gold_pmids)
        assert_equals(response, test_data_pubmed_is_mice)

    @online
    def test_pubmed_is_bacteria(self):
        response = datasources.pubmed.is_bacteria(gold_pmids)
        assert_equals(response, test_data_pubmed_is_bacteria)

    @online
    def test_pubmed_is_fungi(self):
        response = datasources.pubmed.is_fungi(gold_pmids)
        assert_equals(response, test_data_pubmed_is_fungi)

    @online
    def test_pubmed_is_cultured_cells(self):
        response = datasources.pubmed.is_cultured_cells(gold_pmids)
        assert_equals(response, test_data_pubmed_is_cultured_cells)
        
    @online
    def test_pubmed_is_cancer(self):
        response = datasources.pubmed.is_cancer(gold_pmids)
        assert_equals(response, test_data_pubmed_is_cancer)
        
        